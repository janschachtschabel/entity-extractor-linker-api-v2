[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "entity-extractor-linker-api"
version = "0.1.0"
description = "Comprehensive entity extraction and knowledge API with Wikipedia linking"
authors = [
    {name = "Jan Schachtschabel", email = "jan@example.com"}
]
readme = "README.md"
license = {text = "Apache-2.0"}
requires-python = ">=3.11"
keywords = ["entity-extraction", "wikipedia", "nlp", "knowledge-api", "fastapi"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: Apache Software License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]

dependencies = [
    "fastapi>=0.111.0",
    "uvicorn[standard]>=0.29.0",
    "pydantic>=2.7.3",
    "pydantic-settings>=2.0.0",
    "loguru>=0.7.2",
    "aiohttp>=3.9",
    "httpx>=0.25.0",
    "openai>=1.14.0",
    "pytz>=2023.3",
]

[project.optional-dependencies]
dev = [
    "pytest>=8.2.0",
    "pytest-cov>=5.0",
    "pytest-asyncio>=0.23.7",
    "aioresponses>=0.7",
    "ruff>=0.4.8",
    "mypy>=1.10.0",
    "pre-commit>=3.6.0",
    "lxml>=4.9.0",
]

[project.urls]
Homepage = "https://github.com/janschachtschabel/entity-extractor-linker-api"
Documentation = "http://localhost:8000/docs"
Repository = "https://github.com/janschachtschabel/entity-extractor-linker-api"
Issues = "https://github.com/janschachtschabel/entity-extractor-linker-api/issues"

[tool.hatch.build.targets.wheel]
packages = ["app"]

[tool.hatch.build.targets.sdist]
include = [
    "app/",
    "README.md",
    "pyproject.toml"
]

[tool.ruff]
line-length = 120
target-version = "py313"

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
    "D",  # pydocstyle
    "N",  # pep8-naming
    "S",  # flake8-bandit
    "T20", # flake8-print
    "RUF", # Ruff-specific rules
]
ignore = [
    "D100", # Missing docstring in public module
    "D104", # Missing docstring in public package
    "D203", # 1 blank line required before class docstring
    "D213", # Multi-line docstring summary should start at the second line
    "S101", # Use of assert detected (allow in tests)
    "T201", # print found (allow for debugging)
]

[tool.ruff.lint.pydocstyle]
convention = "pep257"

[tool.ruff.lint.isort]
known-first-party = ["app"]
force-sort-within-sections = true
split-on-trailing-comma = true

[tool.ruff.lint.flake8-type-checking]
strict = true

[tool.mypy]
python_version = "3.13"
strict = true
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
html_report = "mypy-report"
xml_report = "mypy-report"

[[tool.mypy.overrides]]
module = "openai.*"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "aiohttp.*"
ignore_missing_imports = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=app",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]
asyncio_mode = "auto"
